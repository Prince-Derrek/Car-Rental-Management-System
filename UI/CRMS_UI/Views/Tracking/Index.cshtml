@model IEnumerable<CRMS_UI.ViewModels.Tracking.TrackingViewModel>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Real-time Vehicle Tracking";
}

<div class="py-8">
    <h1 class="text-3xl font-extrabold text-gray-900 mb-6">@ViewData["Title"]</h1>

    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <div id="map" class="w-full h-[70vh] rounded-xl shadow-2xl mb-6 border-2 border-gray-300 z-0">
    </div>

    <div class="bg-white shadow-xl rounded-xl p-6">
        <h2 class="text-xl font-semibold mb-3">Live Telemetry Data</h2>
        <ul id="telemetryFeed" class="space-y-1 text-sm text-gray-600 font-mono overflow-y-scroll h-40 border p-2 rounded bg-gray-50">
            <li>Awaiting map and SignalR connection...</li>
        </ul>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const nairobiCbd = [-1.286389, 36.817223];
            const map = L.map('map', {
                center: nairobiCbd,
                zoom: 13,
                scrollWheelZoom: true
            });

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            const carMarkers = {};
            const carIcon = L.divIcon({
                className: 'custom-car-icon',
                html: '<i class="fa-solid fa-car-side text-2xl text-indigo-700 shadow-md p-1 bg-white rounded-full border border-indigo-400"></i>',
                iconSize: [32, 32],
                iconAnchor: [16, 16]
            });

            const hubUrl = '@ViewData["ApiSettings:SignalRHub"]';
            const token = '@Context.Session.GetString("JWToken")';
            const telemetryFeed = document.getElementById('telemetryFeed');

            const connection = new signalR.HubConnectionBuilder()
                .withUrl(hubUrl, {
                    accessTokenFactory: () => token
                })
                .withAutomaticReconnect()
                .build();

            connection.on("ReceiveTelemetryUpdate", (data) => {
                console.log("Received Telemetry:", data);
                updateCarLocation(data);

                const listItem = document.createElement('li');
                listItem.textContent = `Car ${data.plate} | Lat: ${data.latitude.toFixed(4)} | Lng: ${data.longitude.toFixed(4)} | Speed: ${data.speed.toFixed(1)} km/h`;
                telemetryFeed.prepend(listItem);

                if (telemetryFeed.children.length > 10) {
                    telemetryFeed.removeChild(telemetryFeed.lastChild);
                }
            });

            connection.start()
                .then(() => {
                    console.log("SignalR Connected.");
                    telemetryFeed.innerHTML = '<li>SignalR Connected successfully. Waiting for data...</li>';
                    map.setView(nairobiCbd, 12);
                })
                .catch(err => {
                    console.error("SignalR Connection Error: ", err.toString());
                    telemetryFeed.innerHTML = `<li class="text-red-500">Connection Error: ${err.toString()}</li>`;
                });

            function updateCarLocation(data) {
                const latLng = [data.latitude, data.longitude];
                const markerKey = `car-${data.vehicleId}`;
                const popupContent = `
                    <div class="font-sans text-sm p-1">
                        <h4 class="font-bold text-indigo-700">${data.plate} (${data.makeModel || 'N/A'})</h4>
                        <p>Speed: <span class="font-semibold text-gray-800">${data.speed.toFixed(1)} km/h</span></p>
                        <p>Updated: <span class="font-semibold text-gray-800">${new Date(data.timeStamp).toLocaleTimeString()}</span></p>
                    </div>`;

                if (carMarkers[markerKey]) {
                    carMarkers[markerKey].setLatLng(L.latLng(latLng));
                    carMarkers[markerKey].setPopupContent(popupContent);
                } else {
                    const newMarker = L.marker(latLng, { icon: carIcon })
                        .addTo(map)
                        .bindPopup(popupContent);
                    carMarkers[markerKey] = newMarker;
                }
            }
        });
    </script>
}